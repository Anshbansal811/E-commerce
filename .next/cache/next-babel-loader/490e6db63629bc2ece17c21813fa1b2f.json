{"ast":null,"code":"import initDB from '../../helpers/initDB';\nimport User from '../../models/User';\nimport bcrypt from 'bcryptjs';\nimport Cart from '../../models/Cart';\ninitDB();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!name || !email || !password) {\n      return res.status(422).json({\n        error: \"please ass all the fields\"\n      });\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).json({\n        error: \"user already exists with that email\"\n      });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 12);\n    const newUser = await new User({\n      name,\n      email,\n      password: hashedPassword\n    }).save();\n    await new Cart({\n      user: newUser._id\n    }).save();\n    res.status(201).json({\n      message: \"signup success\"\n    });\n  } catch (err) {\n    console.log(err);\n  }\n});","map":{"version":3,"sources":["D:/Web/E-commerce/pages/api/signup.js"],"names":["initDB","User","bcrypt","Cart","req","res","name","email","password","body","status","json","error","user","findOne","hashedPassword","hash","newUser","save","_id","message","err","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACAH,MAAM;AAGN,gBAAe,OAAOI,GAAP,EAAWC,GAAX,KAAiB;AAC3B,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA;AAAZ,MAAwBJ,GAAG,CAACK,IAAlC;;AACA,MAAG;AACA,QAAG,CAACH,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,QAAvB,EAAgC;AAC9B,aAAOH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACD;;AACH,UAAMC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAL,CAAa;AAACP,MAAAA;AAAD,KAAb,CAAnB;;AACA,QAAGM,IAAH,EAAQ;AACJ,aAAOR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACH;;AACF,UAAMG,cAAc,GAAG,MAAMb,MAAM,CAACc,IAAP,CAAYR,QAAZ,EAAqB,EAArB,CAA7B;AACA,UAAMS,OAAO,GAAI,MAAM,IAAIhB,IAAJ,CAAS;AAC5BK,MAAAA,IAD4B;AAE5BC,MAAAA,KAF4B;AAG5BC,MAAAA,QAAQ,EAACO;AAHmB,KAAT,EAIpBG,IAJoB,EAAvB;AAKA,UAAM,IAAIf,IAAJ,CAAS;AAACU,MAAAA,IAAI,EAACI,OAAO,CAACE;AAAd,KAAT,EAA6BD,IAA7B,EAAN;AACGb,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACS,MAAAA,OAAO,EAAC;AAAT,KAArB;AACF,GAhBD,CAgBC,OAAMC,GAAN,EAAU;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACL,CArBD","sourcesContent":["import initDB from '../../helpers/initDB'\r\nimport User from '../../models/User'\r\nimport bcrypt from 'bcryptjs'\r\nimport Cart from '../../models/Cart'\r\ninitDB()\r\n\r\n\r\nexport default async (req,res)=>{\r\n     const {name,email,password} = req.body\r\n     try{\r\n        if(!name || !email || !password){\r\n          return res.status(422).json({error:\"please ass all the fields\"})\r\n        }\r\n      const user = await User.findOne({email})\r\n      if(user){\r\n          return res.status(422).json({error:\"user already exists with that email\"})\r\n      }\r\n     const hashedPassword = await bcrypt.hash(password,12)\r\n     const newUser =  await new User({\r\n         name,\r\n         email,\r\n         password:hashedPassword\r\n     }).save()\r\n     await new Cart({user:newUser._id}).save()\r\n        res.status(201).json({message:\"signup success\"})\r\n     }catch(err){\r\n         console.log(err)\r\n     }\r\n}"]},"metadata":{},"sourceType":"module"}
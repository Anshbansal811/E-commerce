{"ast":null,"code":"import initDB from '../../helpers/initDB';\nimport User from '../../models/User';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\ninitDB();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    if (!email || !password) {\n      return res.status(422).json({\n        error: \"please ass all the fields\"\n      });\n    }\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        error: \"user dont exists with that email\"\n      });\n    }\n\n    const doMatch = await bcrypt.compare(password, user.password);\n\n    if (doMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: \"7d\"\n      });\n      const {\n        name,\n        role,\n        email\n      } = user;\n      res.status(201).json({\n        token,\n        user: {\n          name,\n          role,\n          email\n        }\n      });\n    } else {\n      return res.status(401).json({\n        error: \"email or password dont match\"\n      });\n    }\n  } catch (err) {\n    console.log(err);\n  }\n});","map":{"version":3,"sources":["D:/Web/E-commerce/pages/api/login.js"],"names":["initDB","User","bcrypt","jwt","req","res","email","password","body","status","json","error","user","findOne","doMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","name","role","err","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,MAAM;AAEN,gBAAe,OAAOI,GAAP,EAAWC,GAAX,KAAiB;AAC3B,QAAM;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAmBH,GAAG,CAACI,IAA7B;;AACA,MAAG;AACA,QAAG,CAACF,KAAD,IAAU,CAACC,QAAd,EAAuB;AACrB,aAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACD;;AACH,UAAMC,IAAI,GAAG,MAAMX,IAAI,CAACY,OAAL,CAAa;AAACP,MAAAA;AAAD,KAAb,CAAnB;;AACA,QAAG,CAACM,IAAJ,EAAS;AACL,aAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACH;;AACC,UAAMG,OAAO,GAAI,MAAMZ,MAAM,CAACa,OAAP,CAAeR,QAAf,EAAwBK,IAAI,CAACL,QAA7B,CAAvB;;AACA,QAAGO,OAAH,EAAW;AACR,YAAME,KAAK,GAAIb,GAAG,CAACc,IAAJ,CAAS;AAACC,QAAAA,MAAM,EAACN,IAAI,CAACO;AAAb,OAAT,EAA2BC,OAAO,CAACC,GAAR,CAAYC,UAAvC,EAAkD;AAC5DC,QAAAA,SAAS,EAAC;AADkD,OAAlD,CAAf;AAGC,YAAM;AAACC,QAAAA,IAAD;AAAMC,QAAAA,IAAN;AAAWnB,QAAAA;AAAX,UAAoBM,IAA1B;AACAP,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACM,QAAAA,KAAD;AAAOJ,QAAAA,IAAI,EAAC;AAACY,UAAAA,IAAD;AAAMC,UAAAA,IAAN;AAAWnB,UAAAA;AAAX;AAAZ,OAArB;AACH,KAND,MAMK;AACF,aAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAC;AAAP,OAArB,CAAP;AACF;AACH,GAlBD,CAkBC,OAAMe,GAAN,EAAU;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACL,CAvBD","sourcesContent":["import initDB from '../../helpers/initDB'\r\nimport User from '../../models/User'\r\nimport bcrypt from 'bcryptjs'\r\nimport jwt from 'jsonwebtoken'\r\n\r\ninitDB()\r\n\r\nexport default async (req,res)=>{\r\n     const {email,password} = req.body\r\n     try{\r\n        if(!email || !password){\r\n          return res.status(422).json({error:\"please ass all the fields\"})\r\n        }\r\n      const user = await User.findOne({email})\r\n      if(!user){\r\n          return res.status(404).json({error:\"user dont exists with that email\"})\r\n      }\r\n        const doMatch =  await bcrypt.compare(password,user.password)\r\n        if(doMatch){\r\n           const token =  jwt.sign({userId:user._id},process.env.JWT_SECRET,{\r\n                expiresIn:\"7d\"\r\n            })\r\n            const {name,role,email} = user\r\n            res.status(201).json({token,user:{name,role,email}})\r\n        }else{\r\n           return res.status(401).json({error:\"email or password dont match\"})\r\n        }\r\n     }catch(err){\r\n         console.log(err)\r\n     }\r\n}"]},"metadata":{},"sourceType":"module"}